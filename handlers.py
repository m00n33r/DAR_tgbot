from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ConversationHandler, ContextTypes
from datetime import datetime, date, timedelta
from database_sqlite import DatabaseManager
from keyboards import Keyboards
from calendar_widget import booking_calendar
import locale
from itertools import groupby
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_TIME, 'Russian_Russia.1251')


(
    CHOOSING_FLOOR, CHOOSING_ROOM, ENTERING_FULL_NAME, ENTERING_PURPOSE,
    SELECTING_DATE, ENTERING_START_TIME, ENTERING_END_TIME,
    CONFIRMING_BOOKING, ADMIN_PASSWORD, ENTERING_MANUAL_DATE
) = range(10)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
(
    ADMIN_MAIN, ADMIN_ADDING_ROOM_FLOOR, ADMIN_ADDING_ROOM_NUMBER,
    ADMIN_ADDING_ROOM_NAME, ADMIN_ADDING_ROOM_CAPACITY, ADMIN_ADDING_ROOM_EQUIPMENT,
    ADMIN_ADDING_ROOM_DESCRIPTION, ADMIN_SELECT_CONTACTS_DATE, ADMIN_SELECT_DELETE_DATE,
    ADMIN_EDIT_SELECT_FLOOR, ADMIN_EDIT_SELECT_ROOM, ADMIN_EDIT_SELECT_FIELD,
    ADMIN_EDIT_SET_NEW_VALUE
) = range(10, 23)


class Handlers:
    def __init__(self):
        self.db = DatabaseManager()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        # Ensure the user exists in DB using the unified user management API
        self.db.get_or_create_user(user)
        await update.message.reply_text(
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é:",
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def show_rooms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π:",
            reply_markup=Keyboards.get_floors_keyboard()
        )
    
    async def start_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        for key in list(context.user_data.keys()):
            if key.startswith('booking_'):
                del context.user_data[key]
        await update.message.reply_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=Keyboards.get_booking_floors_keyboard()
        )
        return CHOOSING_FLOOR

    async def show_floor_rooms_for_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        floor = int(query.data.split("_")[2])
        context.user_data['booking_floor'] = floor
        rooms = self.db.get_rooms_by_floor(floor)
        if not rooms:
            await query.edit_message_text(
                f"‚ùå –ù–∞ {floor} —ç—Ç–∞–∂–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π.",
                reply_markup=Keyboards.get_booking_floors_keyboard()
            )
            return CHOOSING_FLOOR
        await query.edit_message_text(
            f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∞ {floor} —ç—Ç–∞–∂–µ:",
            reply_markup=Keyboards.get_booking_rooms_keyboard(rooms, floor)
        )
        return CHOOSING_ROOM

    async def start_booking_from_room_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        room_id = int(query.data.split("_")[3])
        room = self.db.get_room_by_id(room_id)
        if not room:
            await query.edit_message_text("‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
        for key in list(context.user_data.keys()):
            if key.startswith('booking_'):
                del context.user_data[key]
        context.user_data['booking_room_id'] = room_id
        context.user_data['booking_room'] = room
        room_name = room.get('name', f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {room["room_number"]}')
        await query.edit_message_text(
            f"üè¢ –í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: {room_name}\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return ENTERING_FULL_NAME
    
    async def start_booking_from_room(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        room_id = int(query.data.split("_")[2])
        room = self.db.get_room_by_id(room_id)
        if not room:
            await query.edit_message_text("‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return CHOOSING_ROOM
        context.user_data['booking_room_id'] = room_id
        context.user_data['booking_room'] = room
        room_name = room.get('name', f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {room["room_number"]}')
        await query.edit_message_text(
            f"üè¢ –í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: {room_name}\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return ENTERING_FULL_NAME
    
    async def enter_full_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['booking_full_name'] = update.message.text.strip()
        await update.message.reply_text("üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=Keyboards.get_cancel_keyboard())
        return ENTERING_PURPOSE
    
    async def enter_purpose(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['booking_purpose'] = update.message.text.strip()
        now = datetime.now()
        calendar_markup = booking_calendar.create_calendar(year=now.year, month=now.month)
        context.user_data['calendar_context'] = 'booking_date'
        await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=calendar_markup)
        return SELECTING_DATE

    async def request_manual_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return ENTERING_MANUAL_DATE

    async def handle_manual_date_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        date_text = update.message.text.strip()
        try:
            booking_date = datetime.strptime(date_text, '%d.%m.%Y').date()
            if booking_date < date.today():
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â–µ —Ä–∞–∑:")
                return ENTERING_MANUAL_DATE
            context.user_data['booking_date'] = booking_date
            await update.message.reply_text(f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y')}\n\nüïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
            return ENTERING_START_TIME
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return ENTERING_MANUAL_DATE
    
    async def enter_start_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            start_time = datetime.strptime(update.message.text.strip(), '%H:%M').time()
            context.user_data['booking_start_time'] = start_time
            await update.message.reply_text("üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16:00):")
            return ENTERING_END_TIME
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            return ENTERING_START_TIME
    
    async def enter_end_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            end_time = datetime.strptime(update.message.text.strip(), '%H:%M').time()
            if end_time <= context.user_data['booking_start_time']:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞:")
                return ENTERING_END_TIME
            context.user_data['booking_end_time'] = end_time
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
            await update.message.reply_text(
                "üîÅ –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?",
                reply_markup=Keyboards.get_recurrence_keyboard()
            )
            context.user_data['booking_recurrence'] = 'none'
            return SELECTING_DATE
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            return ENTERING_END_TIME
            
    async def show_booking_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        ud = context.user_data
        room_name = ud.get('booking_room', {}).get('name', '?')
        full_name = ud.get('booking_full_name', '')
        purpose = ud.get('booking_purpose', '')
        booking_date = ud.get('booking_date')
        start_time = ud.get('booking_start_time')
        end_time = ud.get('booking_end_time')
        recurrence = ud.get('booking_recurrence', 'none')
        recurrence_until = ud.get('booking_recurrence_until')
        
        text = (
            f"üìã –°–≤–æ–¥–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
            f"üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {room_name}\n"
            f"üë§ –§–ò–û: {full_name}\n"
            f"üéØ –¶–µ–ª—å: {purpose}\n"
            f"üìÖ –î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n"
            f"üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {self._format_recurrence(recurrence, recurrence_until)}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        await update.message.reply_text(text, reply_markup=Keyboards.get_booking_confirmation_keyboard())

    async def show_booking_confirmation_from_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        ud = context.user_data
        room_name = ud.get('booking_room', {}).get('name', '?')
        full_name = ud.get('booking_full_name', '')
        purpose = ud.get('booking_purpose', '')
        booking_date = ud.get('booking_date')
        start_time = ud.get('booking_start_time')
        end_time = ud.get('booking_end_time')
        recurrence = ud.get('booking_recurrence', 'none')
        recurrence_until = ud.get('booking_recurrence_until')

        text = (
            f"üìã –°–≤–æ–¥–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
            f"üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {room_name}\n"
            f"üë§ –§–ò–û: {full_name}\n"
            f"üéØ –¶–µ–ª—å: {purpose}\n"
            f"üìÖ –î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n"
            f"üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {self._format_recurrence(recurrence, recurrence_until)}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        await update.callback_query.edit_message_text(text, reply_markup=Keyboards.get_booking_confirmation_keyboard())

    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
        user = update.effective_user
        self.db.get_or_create_user(user)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ user_data
        ud = context.user_data
        room_id = ud.get('booking_room_id')
        full_name = ud.get('booking_full_name')
        purpose = ud.get('booking_purpose')
        booking_date = ud.get('booking_date')
        start_time = ud.get('booking_start_time')
        end_time = ud.get('booking_end_time')

        try:
            start_dt = datetime.combine(booking_date, start_time)
            end_dt = datetime.combine(booking_date, end_time)
            recurrence = ud.get('booking_recurrence', 'none')
            recurrence_until = ud.get('booking_recurrence_until')

            if recurrence != 'none' and recurrence_until:
                group_id = f"{user.id}-{room_id}-{int(datetime.now().timestamp())}"
                current_date = booking_date
                created = 0
                while current_date <= recurrence_until:
                    s_dt = datetime.combine(current_date, start_time)
                    e_dt = datetime.combine(current_date, end_time)
                    if self.db.check_room_availability(room_id, s_dt, e_dt):
                        self.db.create_booking(
                            user,
                            room_id,
                            full_name,
                            purpose,
                            s_dt,
                            e_dt,
                            recurrence_type=recurrence,
                            recurrence_until=datetime.combine(recurrence_until, end_time),
                            recurrence_group=group_id
                        )
                        created += 1
                    # —à–∞–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    if recurrence == 'weekly':
                        current_date = date.fromordinal(current_date.toordinal() + 7)
                    elif recurrence == 'biweekly':
                        current_date = date.fromordinal(current_date.toordinal() + 14)
                    elif recurrence == 'monthly':
                        # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–Ω–µ–º 28
                        year = current_date.year + (current_date.month // 12)
                        month = (current_date.month % 12) + 1
                        day = min(current_date.day, 28)
                        current_date = date(year, month, day)
                await query.edit_message_text(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {created}")
            else:
                self.db.create_booking(
                    user,
                    room_id, 
                    full_name,
                    purpose,
                    start_dt,
                    end_dt
                )
                await query.edit_message_text("‚úÖ **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!**", parse_mode='Markdown')
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        finally:
            for key in list(context.user_data.keys()):
                if key.startswith('booking_'):
                    del context.user_data[key]
            return ConversationHandler.END

    def _format_recurrence(self, rec_type: str, until) -> str:
        mapping = {
            'none': '–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ',
            'weekly': '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
            'biweekly': '–†–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏',
            'monthly': '–†–∞–∑ –≤ –º–µ—Å—è—Ü'
        }
        base = mapping.get(rec_type, '–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ')
        if rec_type != 'none' and until:
            return f"{base} –¥–æ {until.strftime('%d.%m.%Y')}"
        return base
            
    async def cancel_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        for key in list(context.user_data.keys()):
            if key.startswith('booking_'):
                del context.user_data[key]
        text = "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.delete_message()
            await update.callback_query.message.reply_text(text, reply_markup=Keyboards.get_main_menu())
        else:
            await update.message.reply_text(text, reply_markup=Keyboards.get_main_menu())
        return ConversationHandler.END

    async def rewrite_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        for key in ['booking_full_name', 'booking_purpose', 'booking_date', 'booking_start_time', 'booking_end_time']:
            context.user_data.pop(key, None)
        room_name = context.user_data.get('booking_room', {}).get('name', '?')
        await query.edit_message_text(f"–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {room_name}\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return ENTERING_FULL_NAME
    
    async def show_my_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        logging.info("Entering show_my_bookings function")
        user_id = update.effective_user.id
        bookings_raw = self.db.get_user_bookings(user_id)
        logging.info(f"Got {len(bookings_raw)} bookings from DB for user {user_id}")
        
        if not bookings_raw:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
        bookings = []
        for b in bookings_raw:
            b['start_time'] = datetime.fromisoformat(b['start_time'])
            b['end_time'] = datetime.fromisoformat(b['end_time'])
            bookings.append(b)

        message = "üìÖ **–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏ –ø–æ –¥–∞—Ç–µ
        grouped_bookings = groupby(bookings, lambda b: b['start_time'].date())
        
        for booking_date, group in grouped_bookings:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "16 –æ–∫—Ç")
            date_str = booking_date.strftime("%d %b").lower()
            message += f"üóì **{date_str}**\n"
            
            for b in group:
                start_time = b['start_time'].strftime('%H:%M')
                end_time = b['end_time'].strftime('%H:%M')
                purpose = b['purpose']
                room_name = b['room_name']
                message += f"    `{start_time}`-`{end_time}` - *{room_name}*: _{purpose}_\n"
            message += "\n"
            
        await update.message.reply_text(message, parse_mode='Markdown')
        logging.info("Sent my_bookings message to user")

    async def show_all_active_bookings_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['calendar_context'] = 'active_bookings'
        now = datetime.now()
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:",
            reply_markup=booking_calendar.create_calendar(year=now.year, month=now.month)
        )

    async def handle_calendar_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = booking_calendar.parse_callback_data(query.data)
        action = data.get('action')
        cal_ctx = context.user_data.get('calendar_context', '')

        if action in ['prev', 'next']:
            year, month = (data['year'], data['month'])
            if action == 'prev': year, month = booking_calendar.get_prev_month(year, month)
            else: year, month = booking_calendar.get_next_month(year, month)
            await query.edit_message_reply_markup(booking_calendar.create_calendar(year=year, month=month))
            return SELECTING_DATE if cal_ctx == 'booking_date' else None

        if action == 'select':
            selected_date = date(data['year'], data['month'], data['day'])
            if cal_ctx == 'booking_date':
                context.user_data['booking_date'] = selected_date
                await query.edit_message_text(f"üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n\nüïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú):")
                return ENTERING_START_TIME
            elif cal_ctx == 'active_bookings':
                await self.show_active_bookings_for_date(update, context, selected_date)
                return None
            elif cal_ctx == 'admin_contacts':
                return await self.admin_show_contacts_for_date(update, context, selected_date)
            elif cal_ctx == 'admin_delete':
                return await self.admin_show_bookings_to_delete(update, context, selected_date)
            elif cal_ctx == 'recurrence_until':
                base_date = context.user_data.get('booking_date')
                if base_date and selected_date < base_date:
                    await query.edit_message_text(
                        "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                        reply_markup=booking_calendar.create_calendar(year=base_date.year, month=base_date.month)
                    )
                    return SELECTING_DATE
                context.user_data['booking_recurrence_until'] = selected_date
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ callback
                await self.show_booking_confirmation_from_callback(update, context)
                return CONFIRMING_BOOKING

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if cal_ctx == 'booking_date':
            return SELECTING_DATE
        elif cal_ctx == 'admin_contacts':
            return ADMIN_SELECT_CONTACTS_DATE
        elif cal_ctx == 'admin_delete':
            return ADMIN_SELECT_DELETE_DATE
        return None

    async def handle_recurrence_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: recurrence_none|weekly|biweekly|monthly"""
        query = update.callback_query
        await query.answer()
        data = query.data
        if not data.startswith('recurrence_'):
            return
        rec_type = data.split('_', 1)[1]  # none|weekly|biweekly|monthly
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if rec_type not in ['none', 'weekly', 'biweekly', 'monthly']:
            rec_type = 'none'
        context.user_data['booking_recurrence'] = rec_type

        if rec_type == 'none':
            # –ü–æ–∫–∞–∂–µ–º —Å–≤–æ–¥–∫—É —Å—Ä–∞–∑—É
            await self.show_booking_confirmation_from_callback(update, context)
            return CONFIRMING_BOOKING

        # –ü–æ–ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        now = datetime.now()
        context.user_data['calendar_context'] = 'recurrence_until'
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ):",
            reply_markup=booking_calendar.create_calendar(year=now.year, month=now.month)
        )
        return SELECTING_DATE

    async def show_active_bookings_for_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, selected_date):
        query = update.callback_query
        bookings_raw = self.db.get_bookings_for_date(selected_date)
        if not bookings_raw:
            text = f"üìã –ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        else:
            text = f"üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:\n\n"
            for b in bookings_raw:
                room = self.db.get_room_by_id(b['room_id'])
                user = self.db.get_user_by_id(b['user_id'])
                start_time_dt = datetime.fromisoformat(b['start_time'])
                end_time_dt = datetime.fromisoformat(b['end_time'])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user:
                    first_name = user.get('first_name', '')
                    last_name = user.get('last_name', '')
                    user_full_name = f"{first_name} {last_name}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                else:
                    user_full_name = b.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                
                text += f"üè¢ **{room.get('name', '?')}** ({start_time_dt.strftime('%H:%M')}-{end_time_dt.strftime('%H:%M')})\n"
                text += f"üë§ {user_full_name}\nüéØ {b['purpose']}\n\n"
        await query.edit_message_text(text, reply_markup=Keyboards.get_back_to_calendar_keyboard(), parse_mode='Markdown')

    async def show_floor_rooms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        floor = int(query.data.split('_')[1])
        rooms = self.db.get_rooms_by_floor(floor)
        if not rooms:
            await query.edit_message_text(f"‚ùå –ù–∞ {floor} —ç—Ç–∞–∂–µ –Ω–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–π.", reply_markup=Keyboards.get_floors_keyboard())
            return
        await query.edit_message_text(f"üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ {floor} —ç—Ç–∞–∂–µ:", reply_markup=Keyboards.get_rooms_keyboard(rooms, floor))

    async def show_room_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        room_id = int(query.data.split('_')[1])
        room = self.db.get_room_by_id(room_id)
        if not room:
            await query.edit_message_text("‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        text = (
            f"üè¢ **{room.get('name', '–ê—É–¥–∏—Ç–æ—Ä–∏—è')}**\n\n"
            f"üìç **–≠—Ç–∞–∂:** {room.get('floor', '-')}\n"
            f"üë• **–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:** {room.get('capacity', '-')} —á–µ–ª.\n"
            f"üîß **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {room.get('equipment', '-')}\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {room.get('description', '-')}"
        )
        await query.edit_message_text(text, reply_markup=Keyboards.get_room_details_keyboard(room_id), parse_mode='Markdown')
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É DAR\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π –≤ –∑–¥–∞–Ω–∏–∏ DAR.\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏.\n"
            "üóÇ –ê—É–¥–∏—Ç–æ—Ä–∏–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –ø–æ —ç—Ç–∞–∂–∞–º.\n"
            "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n"
            "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –∑–¥–∞–Ω–∏–∏.\n"
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å).\n\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @Serik_Murzaliev\n"
            "‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: @m00n33r\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await update.message.reply_text(text=text)

    async def handle_text_global(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤: –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
        if context.user_data.get('awaiting_admin_password'):
            return await self.check_admin_password(update, context)
        # –∑–∞—Ç–µ–º: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–π
        if context.user_data.get('admin_edit_in_progress') and context.user_data.get('admin_edit_field'):
            return await self.admin_edit_set_new_value(update, context)
        # –∏–Ω–∞—á–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    async def handle_other_callbacks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query.data.startswith("cal_"):
            await self.handle_calendar_callback(update, context)
            return
        if query.data.startswith('recurrence_'):
            await self.handle_recurrence_callback(update, context)
            return
        await query.answer()
        if query.data.startswith("floor_"): await self.show_floor_rooms(update, context)
        elif query.data.startswith("room_"): await self.show_room_details(update, context)
        elif query.data == "back_to_floors": await query.edit_message_text("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:", reply_markup=Keyboards.get_floors_keyboard())
        elif query.data == "back_to_calendar":
            context.user_data['calendar_context'] = 'active_bookings'
            now = datetime.now()
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:",
                reply_markup=booking_calendar.create_calendar(year=now.year, month=now.month)
            )
        elif query.data == "back_to_main":
            await query.answer()
            await query.delete_message()
            await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=Keyboards.get_main_menu())
        elif query.data == "back_to_admin":
            await self.show_admin_panel(update, context)


    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å. –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å message, –∏ —Å callback_query."""
        query = update.callback_query
        user = update.effective_user

        async def reply(text, reply_markup):
            if query:
                await query.answer()
                await query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)

        if self.db.is_user_admin(user.id):
            await reply(
                "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=Keyboards.get_admin_menu()
            )
        else:
            # –æ—Ç–º–µ—Ç–∏–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
            context.user_data['awaiting_admin_password'] = True
            await reply(
                "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                reply_markup=None
            )


    async def check_admin_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        user_id = update.effective_user.id
        password = update.message.text.strip()

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–¥—É—Ç
        if not context.user_data.get('awaiting_admin_password'):
            return

        if self.db.check_admin_password(user_id, password):
            await update.message.reply_text(
                "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!",
                reply_markup=Keyboards.get_admin_menu()
            )
            context.user_data.pop('awaiting_admin_password', None)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫–∂–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –∫–∞–∫ –ø–∞—Ä–æ–ª—å
    
    async def exit_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        query = update.callback_query
        await query.answer()
        await query.delete_message()
        await query.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=Keyboards.get_main_menu())
        return ConversationHandler.END

    async def show_admin_panel_and_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ."""
        for key in list(context.user_data.keys()):
            if key.startswith('booking_'):
                del context.user_data[key]
        return ConversationHandler.END

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ---
    async def admin_add_room_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:",
            reply_markup=Keyboards.get_add_room_keyboard()
        )
        return ADMIN_ADDING_ROOM_FLOOR
    
    async def admin_add_room_get_floor(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        floor = int(query.data.split("_")[-1])
        context.user_data['admin_add_floor'] = floor
        await query.edit_message_text(f"–≠—Ç–∞–∂ {floor}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 214):")
        return ADMIN_ADDING_ROOM_NUMBER

    async def admin_add_room_get_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['admin_add_number'] = update.message.text.strip()
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª):")
        return ADMIN_ADDING_ROOM_NAME

    async def admin_add_room_get_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['admin_add_name'] = update.message.text.strip()
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ):")
        return ADMIN_ADDING_ROOM_CAPACITY

    async def admin_add_room_get_capacity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['admin_add_capacity'] = int(update.message.text.strip())
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return ADMIN_ADDING_ROOM_EQUIPMENT
        
    async def admin_add_room_get_equipment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['admin_add_equipment'] = update.message.text.strip()
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")
        return ADMIN_ADDING_ROOM_DESCRIPTION

    async def admin_add_room_finish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        ud = context.user_data
        success = self.db.create_room(
            room_number=ud['admin_add_number'],
            name=ud['admin_add_name'],
            floor=ud['admin_add_floor'],
            capacity=ud['admin_add_capacity'],
            equipment=ud['admin_add_equipment'],
            description=update.message.text.strip()
        )
        if success:
            await update.message.reply_text("‚úÖ –ê—É–¥–∏—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=Keyboards.get_admin_menu())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.", reply_markup=Keyboards.get_admin_menu())

        # Clear admin_add_... keys
        for key in list(ud.keys()):
            if key.startswith('admin_add_'):
                del ud[key]
        return ADMIN_MAIN
        
    # --- –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    async def admin_contacts_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        context.user_data['calendar_context'] = 'admin_contacts'
        now = datetime.now()
        await query.edit_message_text(
            "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=booking_calendar.create_calendar(year=now.year, month=now.month)
        )
        return ADMIN_SELECT_CONTACTS_DATE
    
    async def admin_show_contacts_for_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, selected_date):
        query = update.callback_query
        bookings = self.db.get_bookings_for_date(selected_date)
        
        if not bookings:
            text = f"–ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        else:
            text = f"üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:\n\n"
            for b in bookings:
                user = self.db.get_user_by_id(b['user_id'])
                room = self.db.get_room_by_id(b['room_id'])
                
                username = f"@{user['username']}" if user and user.get('username') else "—Å–∫—Ä—ã—Ç"
                if user:
                    first_name = user.get('first_name', '')
                    last_name = user.get('last_name', '')
                    user_full_name = f"{first_name} {last_name}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                else:
                    user_full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                room_name = room.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è') if room else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'
                
                start_time_dt = datetime.fromisoformat(b['start_time'])
                end_time_dt = datetime.fromisoformat(b['end_time'])
                
                start_time_str = start_time_dt.strftime('%H:%M')
                end_time_str = end_time_dt.strftime('%H:%M')
                
                text += f"**{room_name}** ({start_time_str}-{end_time_str})\n"
                text += f"üë§ {user_full_name} ({username})\n"
                text += f"üéØ {b.get('purpose', '–¶–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"

        await query.edit_message_text(text, reply_markup=Keyboards.get_back_to_admin_keyboard(), parse_mode='Markdown')
        return ADMIN_MAIN

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ---
    async def admin_delete_booking_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        context.user_data['calendar_context'] = 'admin_delete'
        now = datetime.now()
        await query.edit_message_text(
            "üìÖ –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–µ–π:",
            reply_markup=booking_calendar.create_calendar(year=now.year, month=now.month)
        )
        return ADMIN_SELECT_DELETE_DATE
    
    async def admin_show_bookings_to_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE, selected_date):
        query = update.callback_query
        bookings = self.db.get_bookings_for_date(selected_date)
        context.user_data['admin_delete_date'] = selected_date

        if not bookings:
            text = f"–ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
            keyboard = Keyboards.get_back_to_admin_keyboard()
        else:
            text = f"–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:"
            keyboard = Keyboards.get_delete_booking_keyboard(bookings)

        await query.edit_message_text(text, reply_markup=keyboard)
        return ADMIN_MAIN

    async def admin_confirm_delete_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        booking_id = int(query.data.split("_")[-1])
        
        success = self.db.delete_booking(booking_id)
        if success:
            text = "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."

        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        selected_date = context.user_data.get('admin_delete_date')
        if selected_date:
            return await self.admin_show_bookings_to_delete(update, context, selected_date)
        else:
            await query.edit_message_text(text, reply_markup=Keyboards.get_back_to_admin_keyboard())
            return ADMIN_MAIN

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–π ---
    async def admin_edit_room_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:",
            reply_markup=Keyboards.get_edit_room_floor_keyboard()
        )
        # –≤–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['admin_edit_in_progress'] = True
        return ADMIN_EDIT_SELECT_FLOOR
    
    async def admin_edit_select_floor(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        floor = int(query.data.split("_")[-1])
        rooms = self.db.get_rooms_by_floor(floor)
        await query.edit_message_text(
            f"–≠—Ç–∞–∂ {floor}. –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=Keyboards.get_edit_room_select_keyboard(rooms)
        )
        return ADMIN_EDIT_SELECT_ROOM
    
    async def admin_edit_select_room(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        room_id = int(query.data.split("_")[-1])
        context.user_data['admin_edit_room_id'] = room_id
        room = self.db.get_room_by_id(room_id)
        
        text = f"–í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: *{room['name']}*\. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.get_edit_field_keyboard(room_id),
            parse_mode='MarkdownV2'
        )
        return ADMIN_EDIT_SELECT_FIELD
    
    async def admin_edit_select_field(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        field = query.data.split("_")[-1]
        context.user_data['admin_edit_field'] = field
        
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{field}':")
        return ADMIN_EDIT_SET_NEW_VALUE

    async def admin_edit_set_new_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not context.user_data.get('admin_edit_in_progress'):
            return
        new_value = update.message.text.strip()
        room_id = context.user_data['admin_edit_room_id']
        field = context.user_data['admin_edit_field']

        success = self.db.update_room_field(room_id, field, new_value)
        if success:
            text = "‚úÖ –î–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
            
        await update.message.reply_text(text, reply_markup=Keyboards.get_admin_menu())
        
        # –û—á–∏—Å—Ç–∫–∞
        for key in list(context.user_data.keys()):
            if key.startswith('admin_edit_'):
                del context.user_data[key]
        context.user_data.pop('admin_edit_in_progress', None)
                
        return ADMIN_MAIN

    # Wrapper functions for fallbacks
    async def show_rooms_and_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.show_rooms(update, context)
        return ConversationHandler.END
        
    async def show_my_bookings_and_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.show_my_bookings(update, context)
        return ConversationHandler.END

    async def show_all_active_bookings_calendar_and_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.show_all_active_bookings_calendar(update, context)
        return ConversationHandler.END

    async def show_help_and_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.show_help(update, context)
        return ConversationHandler.END
        
    async def show_admin_panel_and_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ—Ä–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
        for key in list(context.user_data.keys()):
            if key.startswith('booking_'):
                del context.user_data[key]
        return await self.show_admin_panel(update, context)