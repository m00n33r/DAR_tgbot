from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime, date, time
import re
from database import DatabaseManager
from keyboards import Keyboards

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_FLOOR, CHOOSING_ROOM, ENTERING_ROOM_NUMBER, ENTERING_FULL_NAME, ENTERING_PURPOSE, ENTERING_DATE, ENTERING_START_TIME, ENTERING_END_TIME, ADMIN_PASSWORD = range(9)

class Handlers:
    def __init__(self):
        self.db = DatabaseManager()
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        telegram_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        db_user = self.db.get_user_by_telegram_id(telegram_id)
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.create_user(telegram_id, user.username, user.first_name)
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π –ö–¶ ¬´–î–∞—Ä¬ª!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:
üóÇ –ê—É–¥–∏—Ç–æ—Ä–∏–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö
üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é
üîé –ú–æ–∏ –±—Ä–æ–Ω–∏ - –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏
üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
‚ÑπÔ∏è –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def show_rooms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —ç—Ç–∞–∂–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π"""
        await update.message.reply_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π:",
            reply_markup=Keyboards.get_floors_keyboard()
        )
    
    async def show_floor_rooms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç—Ç–∞–∂–µ"""
        query = update.callback_query
        await query.answer()
        
        floor = int(query.data.split('_')[1])
        rooms = self.db.get_rooms_by_floor(floor)
        
        if not rooms:
            await query.edit_message_text(
                f"‚ùå –ù–∞ {floor} —ç—Ç–∞–∂–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π.",
                reply_markup=Keyboards.get_floors_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–∂ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_floor'] = floor
        context.user_data['rooms'] = rooms
        
        await query.edit_message_text(
            f"üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ {floor} —ç—Ç–∞–∂–µ:",
            reply_markup=Keyboards.get_rooms_keyboard(rooms, floor)
        )
    
    async def show_room_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        room_id = int(query.data.split('_')[1])
        room = self.db.get_room_by_id(room_id)
        
        if not room:
            await query.edit_message_text("‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        description = f"""
üè¢ **{room.get('name', f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {room['room_number']}')}**

üìè **–†–∞–∑–º–µ—Ä:** {room['area']} –∫–≤.–º
ü™ë **–ú–µ–±–µ–ª—å:** {room['chairs']} —Å—Ç—É–ª—å–µ–≤, {room['tables']} —Å—Ç–æ–ª–æ–≤

**–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:**
"""
        
        if room.get('monitor'):
            description += "üñ• –ú–æ–Ω–∏—Ç–æ—Ä\n"
        if room.get('flipchart'):
            description += "üìã –§–ª–∏–ø—á–∞—Ä—Ç\n"
        if room.get('air_conditioning'):
            description += "üßä –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä\n"
        
        if room.get('comments'):
            description += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {room['comments']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if room.get('photo_url'):
            await query.edit_message_text(
                description,
                reply_markup=Keyboards.get_room_details_keyboard(room_id),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                description,
                reply_markup=Keyboards.get_room_details_keyboard(room_id),
                parse_mode='Markdown'
            )
    
    async def start_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if 'book_room_' in query.data:
            room_id = int(query.data.split('_')[2])
            context.user_data['booking_room_id'] = room_id
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await query.edit_message_text(
                "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_ROOM_NUMBER
        
        await query.edit_message_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return ENTERING_FULL_NAME
    
    async def enter_room_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        room_number = update.message.text.strip()
        
        # –ò—â–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø–æ –Ω–æ–º–µ—Ä—É
        all_rooms = self.db.get_all_rooms()
        room = None
        for r in all_rooms:
            if str(r['room_number']) == room_number:
                room = r
                break
        
        if not room:
            await update.message.reply_text(
                "‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_ROOM_NUMBER
        
        context.user_data['booking_room_id'] = room['id']
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return ENTERING_FULL_NAME
    
    async def enter_full_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
        full_name = update.message.text.strip()
        context.user_data['full_name'] = full_name
        
        await update.message.reply_text(
            "üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return ENTERING_PURPOSE
    
    async def enter_purpose(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        purpose = update.message.text.strip()
        context.user_data['purpose'] = purpose
        
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=Keyboards.get_cancel_keyboard()
        )
        return ENTERING_DATE
    
    async def enter_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
        date_str = update.message.text.strip()
        
        try:
            booking_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            if booking_date < date.today():
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=Keyboards.get_cancel_keyboard()
                )
                return ENTERING_DATE
            
            context.user_data['booking_date'] = booking_date
            await update.message.reply_text(
                "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú):",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_START_TIME
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_DATE
    
    async def enter_start_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
        time_str = update.message.text.strip()
        
        try:
            start_time = datetime.strptime(time_str, "%H:%M").time()
            context.user_data['start_time'] = start_time
            
            await update.message.reply_text(
                "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú):",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_END_TIME
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_START_TIME
    
    async def enter_end_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        time_str = update.message.text.strip()
        
        try:
            end_time = datetime.strptime(time_str, "%H:%M").time()
            start_time = context.user_data['start_time']
            
            if end_time <= start_time:
                await update.message.reply_text(
                    "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=Keyboards.get_cancel_keyboard()
                )
                return ENTERING_END_TIME
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            room_id = context.user_data['booking_room_id']
            booking_date = context.user_data['booking_date']
            start_datetime = datetime.combine(booking_date, start_time)
            end_datetime = datetime.combine(booking_date, end_time)
            
            if not self.db.check_room_availability(room_id, start_datetime, end_datetime.isoformat()):
                await update.message.reply_text(
                    "‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=Keyboards.get_cancel_keyboard()
                )
                return ENTERING_START_TIME
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            room = self.db.get_room_by_id(room_id)
            room_name = room.get('name', f"–ê—É–¥–∏—Ç–æ—Ä–∏—è {room['room_number']}")
            
            confirmation_text = f"""
üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**

üè¢ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** {room_name}
üë§ **–§–ò–û:** {context.user_data['full_name']}
üéØ **–¶–µ–ª—å:** {context.user_data['purpose']}
üìÖ **–î–∞—Ç–∞:** {booking_date.strftime('%d.%m.%Y')}
üïê **–í—Ä–µ–º—è:** {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:
            """
            
            await update.message.reply_text(
                confirmation_text,
                reply_markup=Keyboards.get_booking_confirmation_keyboard(
                    room_id, 
                    start_datetime.isoformat(), 
                    end_datetime.isoformat()
                ),
                parse_mode='Markdown'
            )
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_END_TIME
    
    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data_parts = query.data.split('_')
        room_id = int(data_parts[2])
        start_time = datetime.fromisoformat(data_parts[3])
        end_time = datetime.fromisoformat(data_parts[4])
        
        user_id = update.effective_user.id
        full_name = context.user_data.get('full_name', '')
        purpose = context.user_data.get('purpose', '')
        
        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking = self.db.create_booking(user_id, room_id, full_name, purpose, start_time, end_time)
        
        if booking:
            room = self.db.get_room_by_id(room_id)
            room_name = room.get('name', f"–ê—É–¥–∏—Ç–æ—Ä–∏—è {room['room_number']}")
            
            success_text = f"""
‚úÖ **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!**

üè¢ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** {room_name}
üë§ **–§–ò–û:** {full_name}
üéØ **–¶–µ–ª—å:** {purpose}
üìÖ **–î–∞—Ç–∞:** {start_time.strftime('%d.%m.%Y')}
üïê **–í—Ä–µ–º—è:** {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
            """
            
            await query.edit_message_text(
                success_text,
                reply_markup=Keyboards.get_main_menu(),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=Keyboards.get_main_menu()
            )
    
    async def show_my_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        bookings = self.db.get_user_bookings(user_id)
        
        if not bookings:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ
        bookings_by_date = {}
        for booking in bookings:
            start_time = datetime.fromisoformat(booking['start_time'])
            date_key = start_time.strftime('%d.%m.%Y')
            if date_key not in bookings_by_date:
                bookings_by_date[date_key] = []
            bookings_by_date[date_key].append(booking)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
        
        for date_key in sorted(bookings_by_date.keys()):
            text += f"üìÖ **{date_key}:**\n"
            for booking in bookings_by_date[date_key]:
                room = booking['rooms']
                room_name = room.get('name', f"–ê—É–¥–∏—Ç–æ—Ä–∏—è {room['room_number']}")
                start_time = datetime.fromisoformat(booking['start_time'])
                end_time = datetime.fromisoformat(booking['end_time'])
                
                text += f"  üè¢ {room_name}\n"
                text += f"  üïê {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n"
                text += f"  üéØ {booking['purpose']}\n\n"
        
        await update.message.reply_text(
            text,
            reply_markup=Keyboards.get_main_menu(),
            parse_mode='Markdown'
        )
    
    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        user_id = update.effective_user.id
        
        if self.db.is_user_admin(user_id):
            await update.message.reply_text(
                "üõ† **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=Keyboards.get_admin_menu(),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ADMIN_PASSWORD
    
    async def check_admin_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        password = update.message.text.strip()
        user_id = update.effective_user.id
        
        if self.db.check_admin_password(user_id, password):
            await update.message.reply_text(
                "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
                reply_markup=Keyboards.get_admin_menu()
            )
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ADMIN_PASSWORD
    
    async def show_all_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if not self.db.is_user_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        bookings = self.db.get_all_bookings()
        
        if not bookings:
            await query.edit_message_text(
                "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
                reply_markup=Keyboards.get_admin_menu()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        text = "üìä **–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
        
        for i, booking in enumerate(bookings[:10]):
            room = booking['rooms']
            room_name = room.get('name', f"–ê—É–¥–∏—Ç–æ—Ä–∏—è {room['room_number']}")
            start_time = datetime.fromisoformat(booking['start_time'])
            end_time = datetime.fromisoformat(booking['end_time'])
            
            text += f"{i+1}. üè¢ {room_name}\n"
            text += f"   üë§ {booking['full_name']}\n"
            text += f"   üìÖ {start_time.strftime('%d.%m.%Y %H:%M')} - {end_time.strftime('%H:%M')}\n"
            text += f"   üéØ {booking['purpose']}\n"
            text += f"   üìä –°—Ç–∞—Ç—É—Å: {booking['status']}\n\n"
        
        if len(bookings) > 10:
            text += f"... –∏ –µ—â–µ {len(bookings) - 10} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.get_admin_menu(),
            parse_mode='Markdown'
        )
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üóÇ **–ê—É–¥–∏—Ç–æ—Ä–∏–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö –ø–æ —ç—Ç–∞–∂–∞–º
üìÖ **–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å** - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
üîé **–ú–æ–∏ –±—Ä–æ–Ω–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
üõ† **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

**–ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é:**
1. –í—ã–±–µ—Ä–∏—Ç–µ "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û
4. –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
5. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã
        """
        
        await update.message.reply_text(
            help_text,
            reply_markup=Keyboards.get_main_menu(),
            parse_mode='Markdown'
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_main":
            await query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=Keyboards.get_main_menu()
            )
        elif query.data == "back_to_floors":
            await query.edit_message_text(
                "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π:",
                reply_markup=Keyboards.get_floors_keyboard()
            )
        elif query.data == "back_to_rooms":
            floor = context.user_data.get('selected_floor', 2)
            rooms = context.user_data.get('rooms', [])
            await query.edit_message_text(
                f"üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ {floor} —ç—Ç–∞–∂–µ:",
                reply_markup=Keyboards.get_rooms_keyboard(rooms, floor)
            )
        elif query.data == "cancel":
            await query.edit_message_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=Keyboards.get_main_menu()
            )
        elif query.data == "cancel_booking":
            await query.edit_message_text(
                "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=Keyboards.get_main_menu()
            )
        elif query.data.startswith("admin_all_bookings"):
            await self.show_all_bookings(update, context)
        elif query.data.startswith("admin_all_users"):
            await query.edit_message_text(
                "üë• **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=Keyboards.get_admin_menu(),
                parse_mode='Markdown'
            )
        elif query.data.startswith("confirm_booking"):
            await self.confirm_booking(update, context)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "üóÇ –ê—É–¥–∏—Ç–æ—Ä–∏–∏":
            await self.show_rooms(update, context)
        elif text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å":
            await update.message.reply_text(
                "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=Keyboards.get_cancel_keyboard()
            )
            return ENTERING_ROOM_NUMBER
        elif text == "üîé –ú–æ–∏ –±—Ä–æ–Ω–∏":
            await self.show_my_bookings(update, context)
        elif text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
            await self.show_admin_panel(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.show_help(update, context)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            if user_id in self.user_states:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                pass
            else:
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
                    reply_markup=Keyboards.get_main_menu()
                )