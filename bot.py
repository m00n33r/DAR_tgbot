#!/usr/bin/env python3
"""
DAR Telegram Bot - –ë–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π
"""

import asyncio
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
from handlers import (
    Handlers,
    CHOOSING_FLOOR,
    CHOOSING_ROOM,
    ENTERING_FULL_NAME,
    ENTERING_PURPOSE,
    SELECTING_DATE,
    ENTERING_START_TIME,
    ENTERING_END_TIME,
    CONFIRMING_BOOKING,
    ADMIN_PASSWORD,
    ENTERING_MANUAL_DATE,
    # Admin states
    ADMIN_MAIN, ADMIN_ADDING_ROOM_FLOOR, ADMIN_ADDING_ROOM_NUMBER,
    ADMIN_ADDING_ROOM_NAME, ADMIN_ADDING_ROOM_CAPACITY, ADMIN_ADDING_ROOM_EQUIPMENT,
    ADMIN_ADDING_ROOM_DESCRIPTION, ADMIN_SELECT_CONTACTS_DATE, ADMIN_SELECT_DELETE_DATE,
    ADMIN_EDIT_SELECT_FLOOR, ADMIN_EDIT_SELECT_ROOM, ADMIN_EDIT_SELECT_FIELD, ADMIN_EDIT_SET_NEW_VALUE
)
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –ï–î–ò–ù–´–ô —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = Handlers()

    # –í–ª–æ–∂–µ–Ω–Ω—ã–π ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), handlers.show_admin_panel)],
        states={
            ADMIN_MAIN: [
                CallbackQueryHandler(handlers.admin_add_room_start, pattern='^admin_add_room$'),
                CallbackQueryHandler(handlers.admin_contacts_start, pattern='^admin_user_contacts$'),
                CallbackQueryHandler(handlers.admin_delete_booking_start, pattern='^admin_booking_delete_menu$'),
                CallbackQueryHandler(handlers.admin_edit_room_start, pattern='^admin_edit_rooms$'),
                CallbackQueryHandler(handlers.admin_confirm_delete_booking, pattern='^admin_confirm_delete_')
            ],
            ADMIN_ADDING_ROOM_FLOOR: [CallbackQueryHandler(handlers.admin_add_room_get_floor, pattern='^admin_add_floor_')],
            ADMIN_ADDING_ROOM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.admin_add_room_get_number)],
            ADMIN_ADDING_ROOM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.admin_add_room_get_name)],
            ADMIN_ADDING_ROOM_CAPACITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.admin_add_room_get_capacity)],
            ADMIN_ADDING_ROOM_EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.admin_add_room_get_equipment)],
            ADMIN_ADDING_ROOM_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.admin_add_room_finish)],
            ADMIN_SELECT_CONTACTS_DATE: [CallbackQueryHandler(handlers.handle_calendar_callback, pattern='^cal_')],
            ADMIN_SELECT_DELETE_DATE: [CallbackQueryHandler(handlers.handle_calendar_callback, pattern='^cal_')],
            ADMIN_EDIT_SELECT_FLOOR: [CallbackQueryHandler(handlers.admin_edit_select_floor, pattern='^admin_edit_floor_')],
            ADMIN_EDIT_SELECT_ROOM: [CallbackQueryHandler(handlers.admin_edit_select_room, pattern='^admin_edit_room_')],
            ADMIN_EDIT_SELECT_FIELD: [CallbackQueryHandler(handlers.admin_edit_select_field, pattern='^admin_edit_field_')],
            ADMIN_EDIT_SET_NEW_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.admin_edit_set_new_value)],
        },
        fallbacks=[
            CallbackQueryHandler(handlers.exit_admin_panel, pattern='^exit_admin$'),
            CallbackQueryHandler(handlers.show_admin_panel, pattern='^back_to_admin$'),
            CallbackQueryHandler(handlers.show_admin_panel, pattern='^cal_cancel$'),
            MessageHandler(filters.Regex('^üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), handlers.show_admin_panel),
        ],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        }
    )

    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å$'), handlers.start_booking),
            CallbackQueryHandler(handlers.start_booking_from_room_details, pattern='^book_room_details_')
        ],
        states={
            CHOOSING_FLOOR: [CallbackQueryHandler(handlers.show_floor_rooms_for_booking, pattern='^book_floor_')],
            CHOOSING_ROOM: [CallbackQueryHandler(handlers.start_booking_from_room, pattern='^book_room_')],
            ENTERING_FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_full_name)],
            ENTERING_PURPOSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_purpose)],
            SELECTING_DATE: [
                CallbackQueryHandler(handlers.request_manual_date, pattern='^cal_manual$'),
                CallbackQueryHandler(handlers.handle_calendar_callback, pattern='^cal_')
            ],
            ENTERING_MANUAL_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_manual_date_input)],
            ENTERING_START_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_start_time)],
            ENTERING_END_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_end_time)],
            CONFIRMING_BOOKING: [
                CallbackQueryHandler(handlers.confirm_booking, pattern='^confirm_booking$'),
                CallbackQueryHandler(handlers.rewrite_booking, pattern='^rewrite_booking$'),
            ],
            ADMIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.check_admin_password)],
        },
        fallbacks=[
            CallbackQueryHandler(handlers.cancel_booking, pattern='^cancel_booking$'),
            CallbackQueryHandler(handlers.cancel_booking, pattern='^cal_cancel$'),
            CommandHandler('cancel', handlers.cancel_booking),
            MessageHandler(filters.Regex('^üóÇ –ê—É–¥–∏—Ç–æ—Ä–∏–∏$'), handlers.show_rooms_and_cancel),
            MessageHandler(filters.Regex('^üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏$'), handlers.show_my_bookings_and_cancel),
            MessageHandler(filters.Regex('^üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏$'), handlers.show_all_active_bookings_calendar_and_cancel),
            MessageHandler(filters.Regex('^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'), handlers.show_help_and_cancel),
            MessageHandler(filters.Regex('^üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$'), handlers.show_admin_panel_and_cancel),
        ],
    )

    application.add_handler(booking_conv_handler)
    
    # –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", handlers.start))
    application.add_handler(MessageHandler(filters.Regex('^üóÇ –ê—É–¥–∏—Ç–æ—Ä–∏–∏$'), handlers.show_rooms))
    application.add_handler(MessageHandler(filters.Regex('^üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏$'), handlers.show_my_bookings))
    application.add_handler(MessageHandler(filters.Regex('^üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏$'), handlers.show_all_active_bookings_calendar))
    application.add_handler(MessageHandler(filters.Regex('^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'), handlers.show_help))
    
    # ConversationHandler –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞
    application.add_handler(admin_conv_handler)
    
    # –í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ ConversationHandler, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –µ–≥–æ callback'–∏
    application.add_handler(CallbackQueryHandler(handlers.handle_other_callbacks))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ DAR Telegram Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    application.run_polling()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")