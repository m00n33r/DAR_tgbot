import asyncio
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
from handlers import Handlers, ENTERING_ROOM_NUMBER, ENTERING_FULL_NAME, ENTERING_PURPOSE, ENTERING_DATE, ENTERING_START_TIME, ENTERING_END_TIME, ADMIN_PASSWORD
import config
from telegram import Update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = Handlers()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", handlers.start))
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å$"), handlers.start_booking),
            CallbackQueryHandler(handlers.start_booking, pattern="^book_room_")
        ],
        states={
            ENTERING_ROOM_NUMBER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_room_number)
            ],
            ENTERING_FULL_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_full_name)
            ],
            ENTERING_PURPOSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_purpose)
            ],
            ENTERING_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_date)
            ],
            ENTERING_START_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_start_time)
            ],
            ENTERING_END_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.enter_end_time)
            ]
        },
        fallbacks=[
            CallbackQueryHandler(handlers.handle_callback, pattern="^cancel$"),
            CallbackQueryHandler(handlers.handle_callback, pattern="^cancel_booking$")
        ]
    )
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$"), handlers.show_admin_panel)
        ],
        states={
            ADMIN_PASSWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.check_admin_password)
            ]
        },
        fallbacks=[
            CallbackQueryHandler(handlers.handle_callback, pattern="^cancel$")
        ]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler'—ã
    application.add_handler(booking_conv_handler)
    application.add_handler(admin_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handlers.show_floor_rooms, pattern="^floor_"))
    application.add_handler(CallbackQueryHandler(handlers.show_room_details, pattern="^room_"))
    application.add_handler(CallbackQueryHandler(handlers.handle_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")