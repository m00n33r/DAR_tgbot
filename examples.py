#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π Telegram-–±–æ—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π
"""

import asyncio
from datetime import datetime, date, time
from database import DatabaseManager
from keyboards import Keyboards

async def test_database_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = DatabaseManager()
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–π –ø–æ —ç—Ç–∞–∂–∞–º
        print("\n1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π –ø–æ —ç—Ç–∞–∂–∞–º:")
        for floor in [2, 3, 4]:
            rooms = db.get_rooms_by_floor(floor)
            print(f"   –≠—Ç–∞–∂ {floor}: {len(rooms)} –∞—É–¥–∏—Ç–æ—Ä–∏–π")
            for room in rooms:
                print(f"     - {room.get('name', f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {room['room_number']}')} ({room['room_number']})")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        print("\n2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")
        room = db.get_room_by_id(1)
        if room:
            print(f"   –ê—É–¥–∏—Ç–æ—Ä–∏—è {room['room_number']}: {room.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   –†–∞–∑–º–µ—Ä: {room['area']} –∫–≤.–º, –°—Ç—É–ª—å—è: {room['chairs']}, –°—Ç–æ–ª—ã: {room['tables']}")
            print(f"   –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –ú–æ–Ω–∏—Ç–æ—Ä: {room.get('monitor', False)}, –§–ª–∏–ø—á–∞—Ä—Ç: {room.get('flipchart', False)}, –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: {room.get('air_conditioning', False)}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        print("\n3. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")
        test_start = datetime.now().replace(hour=10, minute=0, second=0, microsecond=0)
        test_end = datetime.now().replace(hour=12, minute=0, second=0, microsecond=0)
        
        is_available = db.check_room_availability(1, test_start, test_end.isoformat())
        print(f"   –ê—É–¥–∏—Ç–æ—Ä–∏—è 1 –¥–æ—Å—Ç—É–ø–Ω–∞ —Å {test_start.strftime('%H:%M')} –¥–æ {test_end.strftime('%H:%M')}: {is_available}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        print("\n4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")
        today = date.today()
        schedule = db.get_room_bookings_by_date(1, today)
        print(f"   –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 1 –Ω–∞ {today.strftime('%d.%m.%Y')}: {len(schedule)}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def test_keyboard_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        print("1. –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:")
        main_menu = Keyboards.get_main_menu()
        print(f"   –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: {type(main_menu).__name__}")
        
        # –¢–µ—Å—Ç 2: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —ç—Ç–∞–∂–µ–π
        print("2. –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç—Ç–∞–∂–µ–π:")
        floors_kb = Keyboards.get_floors_keyboard()
        print(f"   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —ç—Ç–∞–∂–µ–π —Å–æ–∑–¥–∞–Ω–∞: {type(floors_kb).__name__}")
        
        # –¢–µ—Å—Ç 3: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π
        print("3. –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞—É–¥–∏—Ç–æ—Ä–∏–π:")
        test_rooms = [
            {'id': 1, 'room_number': '201', 'name': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª'},
            {'id': 2, 'room_number': '202', 'name': '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è'}
        ]
        rooms_kb = Keyboards.get_rooms_keyboard(test_rooms, 2)
        print(f"   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞: {type(rooms_kb).__name__}")
        
        # –¢–µ—Å—Ç 4: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print("4. –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        confirm_kb = Keyboards.get_booking_confirmation_keyboard(1, "2024-01-01T10:00:00", "2024-01-01T12:00:00")
        print(f"   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {type(confirm_kb).__name__}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")

def test_booking_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...")
    
    try:
        # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        print("1. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã:")
        valid_date = "15.01.2024"
        invalid_date = "15.13.2024"
        
        try:
            parsed_date = datetime.strptime(valid_date, "%d.%m.%Y").date()
            print(f"   –í–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ {valid_date}: {parsed_date}")
        except ValueError:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç—ã {valid_date}")
        
        try:
            parsed_date = datetime.strptime(invalid_date, "%d.%m.%Y").date()
            print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ {invalid_date} –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        except ValueError:
            print(f"   ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ {invalid_date} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        print("2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:")
        valid_time = "14:30"
        invalid_time = "25:70"
        
        try:
            parsed_time = datetime.strptime(valid_time, "%H:%M").time()
            print(f"   –í–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è {valid_time}: {parsed_time}")
        except ValueError:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ {valid_time}")
        
        try:
            parsed_time = datetime.strptime(invalid_time, "%H:%M").time()
            print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è {invalid_time} –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        except ValueError:
            print(f"   ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è {invalid_time} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        print("3. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:")
        start_time = time(10, 0)  # 10:00
        end_time = time(12, 0)    # 12:00
        invalid_end_time = time(9, 0)  # 9:00
        
        if end_time > start_time:
            print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {start_time} - {end_time}")
        else:
            print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {start_time} - {end_time}")
        
        if invalid_end_time > start_time:
            print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {start_time} - {invalid_end_time}")
        else:
            print(f"   ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {start_time} - {invalid_end_time}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

def test_admin_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("1. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        correct_password = "AdminDAR"
        incorrect_password = "WrongPassword"
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        if correct_password == "AdminDAR":
            print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç")
        else:
            print("   ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
        if incorrect_password == "AdminDAR":
            print("   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç")
        else:
            print("   ‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("2. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        admin_user = {'is_admin': True}
        regular_user = {'is_admin': False}
        
        if admin_user.get('is_admin', False):
            print("   ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
        else:
            print("   ‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
        if regular_user.get('is_admin', False):
            print("   ‚ùå –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø")
        else:
            print("   ‚úÖ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram-–±–æ—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await test_database_functions()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    test_keyboard_generation()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    test_booking_validation()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π
    test_admin_functions()
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python bot.py")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ Telegram")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(main())