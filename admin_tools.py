#!/usr/bin/env python3
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π
"""

import csv
import json
from datetime import datetime, date, timedelta
from typing import List, Dict, Optional
from database import DatabaseManager

class AdminTools:
    def __init__(self):
        self.db = DatabaseManager()
    
    def export_bookings_to_csv(self, filename: str = None, start_date: date = None, end_date: date = None):
        """–≠–∫—Å–ø–æ—Ä—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ CSV —Ñ–∞–π–ª"""
        if not filename:
            filename = f"bookings_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        if not start_date:
            start_date = date.today() - timedelta(days=30)
        if not end_date:
            end_date = date.today()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            all_bookings = self.db.get_all_bookings()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            filtered_bookings = []
            for booking in all_bookings:
                booking_date = datetime.fromisoformat(booking['start_time']).date()
                if start_date <= booking_date <= end_date:
                    filtered_bookings.append(booking)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    'ID', '–ê—É–¥–∏—Ç–æ—Ä–∏—è', '–≠—Ç–∞–∂', '–§–ò–û', '–¶–µ–ª—å', 
                    '–î–∞—Ç–∞', '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–°–æ–∑–¥–∞–Ω–æ'
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for booking in filtered_bookings:
                    room = booking['rooms']
                    start_time = datetime.fromisoformat(booking['start_time'])
                    end_time = datetime.fromisoformat(booking['end_time'])
                    
                    writer.writerow({
                        'ID': booking['id'],
                        '–ê—É–¥–∏—Ç–æ—Ä–∏—è': f"{room.get('name', '–ê—É–¥–∏—Ç–æ—Ä–∏—è')} {room['room_number']}",
                        '–≠—Ç–∞–∂': room['floor'],
                        '–§–ò–û': booking['full_name'],
                        '–¶–µ–ª—å': booking['purpose'],
                        '–î–∞—Ç–∞': start_time.strftime('%d.%m.%Y'),
                        '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞': start_time.strftime('%H:%M'),
                        '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è': end_time.strftime('%H:%M'),
                        '–°—Ç–∞—Ç—É—Å': booking['status'],
                        '–°–æ–∑–¥–∞–Ω–æ': datetime.fromisoformat(booking['created_at']).strftime('%d.%m.%Y %H:%M')
                    })
            
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
            print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(filtered_bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
            return None
    
    def export_room_statistics(self, filename: str = None, days: int = 30):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º"""
        if not filename:
            filename = f"room_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            start_date = date.today() - timedelta(days=days)
            end_date = date.today()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # (–í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_room_statistics –∏–∑ –±–∞–∑—ã)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            statistics = [
                {
                    'room_number': '201',
                    'room_name': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª',
                    'total_bookings': 15,
                    'total_hours': 45.5,
                    'utilization_rate': 23.4
                },
                {
                    'room_number': '202',
                    'room_name': '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è',
                    'total_bookings': 8,
                    'total_hours': 24.0,
                    'utilization_rate': 12.3
                }
            ]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['–ù–æ–º–µ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π', '–û–±—â–µ–µ –≤—Ä–µ–º—è (—á–∞—Å—ã)', '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for stat in statistics:
                    writer.writerow({
                        '–ù–æ–º–µ—Ä': stat['room_number'],
                        '–ù–∞–∑–≤–∞–Ω–∏–µ': stat['room_name'],
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π': stat['total_bookings'],
                        '–û–±—â–µ–µ –≤—Ä–µ–º—è (—á–∞—Å—ã)': stat['total_hours'],
                        '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏': f"{stat['utilization_rate']}%"
                    })
            
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def generate_weekly_report(self, filename: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not filename:
            filename = f"weekly_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            end_date = date.today()
            start_date = end_date - timedelta(days=7)
            
            all_bookings = self.db.get_all_bookings()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            weekly_bookings = []
            for booking in all_bookings:
                booking_date = datetime.fromisoformat(booking['start_time']).date()
                if start_date <= booking_date <= end_date:
                    weekly_bookings.append(booking)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º
            rooms_stats = {}
            for booking in weekly_bookings:
                room_id = booking['room_id']
                if room_id not in rooms_stats:
                    rooms_stats[room_id] = {
                        'bookings_count': 0,
                        'total_hours': 0,
                        'bookings': []
                    }
                
                start_time = datetime.fromisoformat(booking['start_time'])
                end_time = datetime.fromisoformat(booking['end_time'])
                duration = (end_time - start_time).total_seconds() / 3600
                
                rooms_stats[room_id]['bookings_count'] += 1
                rooms_stats[room_id]['total_hours'] += duration
                rooms_stats[room_id]['bookings'].append(booking)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
            with open(filename, 'w', encoding='utf-8') as report_file:
                report_file.write("üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø–ú\n")
                report_file.write("=" * 50 + "\n\n")
                report_file.write(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n")
                report_file.write(f"üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(weekly_bookings)}\n\n")
                
                for room_id, stats in rooms_stats.items():
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                    room = self.db.get_room_by_id(room_id)
                    if room:
                        report_file.write(f"üè¢ {room.get('name', '–ê—É–¥–∏—Ç–æ—Ä–∏—è')} {room['room_number']} (–≠—Ç–∞–∂ {room['floor']})\n")
                        report_file.write(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats['bookings_count']}\n")
                        report_file.write(f"   ‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_hours']:.1f} —á–∞—Å–æ–≤\n")
                        report_file.write(f"   üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_hours']/stats['bookings_count']:.1f} —á–∞—Å–æ–≤\n\n")
                        
                        # –î–µ—Ç–∞–ª–∏ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
                        for booking in stats['bookings']:
                            start_time = datetime.fromisoformat(booking['start_time'])
                            end_time = datetime.fromisoformat(booking['end_time'])
                            report_file.write(f"     ‚Ä¢ {start_time.strftime('%d.%m %H:%M')} - {end_time.strftime('%H:%M')} | {booking['full_name']} | {booking['purpose']}\n")
                        report_file.write("\n")
            
            print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def cleanup_old_bookings(self, days_old: int = 90):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days_old)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            all_bookings = self.db.get_all_bookings()
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            old_bookings = []
            for booking in all_bookings:
                booking_date = datetime.fromisoformat(booking['start_time'])
                if booking_date < cutoff_date:
                    old_bookings.append(booking)
            
            if not old_bookings:
                print(f"‚úÖ –°—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return 0
            
            print(f"üóë –ù–∞–π–¥–µ–Ω–æ {len(old_bookings)} —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –ª–æ–≥–∏–∫–∞
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–æ
            
            print("\n–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            for booking in old_bookings[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                room = booking['rooms']
                start_time = datetime.fromisoformat(booking['start_time'])
                print(f"  ‚Ä¢ {room['room_number']} | {start_time.strftime('%d.%m.%Y')} | {booking['full_name']}")
            
            if len(old_bookings) > 5:
                print(f"  ... –∏ –µ—â–µ {len(old_bookings) - 5} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            
            print(f"\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ cleanup_old_bookings_confirm()")
            return len(old_bookings)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return 0
    
    def get_system_health(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_status = {
                'database_connection': False,
                'tables_status': {},
                'recent_activity': {},
                'overall_status': 'unknown'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–π
                rooms = self.db.get_all_rooms()
                health_status['database_connection'] = True
                health_status['tables_status']['rooms'] = len(rooms)
            except Exception as e:
                health_status['database_connection'] = False
                health_status['tables_status']['rooms'] = f"Error: {e}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ users
                health_status['tables_status']['users'] = "OK"
            except Exception as e:
                health_status['tables_status']['users'] = f"Error: {e}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            try:
                bookings = self.db.get_all_bookings()
                health_status['tables_status']['bookings'] = len(bookings)
            except Exception as e:
                health_status['tables_status']['bookings'] = f"Error: {e}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if health_status['database_connection'] and all(
                isinstance(status, (int, str)) or "Error" not in str(status) 
                for status in health_status['tables_status'].values()
            ):
                health_status['overall_status'] = 'healthy'
            elif health_status['database_connection']:
                health_status['overall_status'] = 'warning'
            else:
                health_status['overall_status'] = 'critical'
            
            return health_status
            
        except Exception as e:
            return {
                'database_connection': False,
                'tables_status': {'error': str(e)},
                'recent_activity': {},
                'overall_status': 'error'
            }
    
    def print_system_health(self):
        """–í—ã–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ –∫–æ–Ω—Å–æ–ª—å"""
        health = self.get_system_health()
        
        print("üè• –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        print("=" * 30)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if health['database_connection'] else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
        print(f"üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}")
        
        # –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü
        print("\nüìã –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü:")
        for table, status in health['tables_status'].items():
            if isinstance(status, int):
                print(f"   {table}: ‚úÖ {status} –∑–∞–ø–∏—Å–µ–π")
            elif "Error" in str(status):
                print(f"   {table}: ‚ùå {status}")
            else:
                print(f"   {table}: ‚úÖ {status}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        status_emoji = {
            'healthy': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'critical': '‚ùå',
            'error': 'üí•',
            'unknown': '‚ùì'
        }
        
        print(f"\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_emoji.get(health['overall_status'], '‚ùì')} {health['overall_status'].upper()}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-—É—Ç–∏–ª–∏—Ç"""
    print("üõ† –ê–¥–º–∏–Ω-—É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π")
    print("=" * 50)
    
    admin_tools = AdminTools()
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        print("2. üìÅ –≠–∫—Å–ø–æ—Ä—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ CSV")
        print("3. üìà –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º")
        print("4. üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        print("5. üóë –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        print("0. üö™ –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "1":
            admin_tools.print_system_health()
        
        elif choice == "2":
            days = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
            days = int(days) if days.isdigit() else 30
            admin_tools.export_bookings_to_csv(days=days)
        
        elif choice == "3":
            days = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
            days = int(days) if days.isdigit() else 30
            admin_tools.export_room_statistics(days=days)
        
        elif choice == "4":
            admin_tools.generate_weekly_report()
        
        elif choice == "5":
            days = input("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—à–µ (–¥–Ω–µ–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90): ").strip()
            days = int(days) if days.isdigit() else 90
            admin_tools.cleanup_old_bookings(days)
        
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

if __name__ == "__main__":
    main()