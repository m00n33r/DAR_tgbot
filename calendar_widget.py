"""
–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
–ê–Ω–∞–ª–æ–≥ telegram-bot-calendar-lite –¥–ª—è Python
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, date, timedelta
from typing import List, Optional, Callable
import calendar as cal

class TelegramCalendar:
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ Telegram –±–æ—Ç–µ"""
    
    def __init__(self):
        self.month_names = [
            '–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
            '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'
        ]
        self.week_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        self.select_icon = '‚úÖ'
        self.prev_icon = '‚¨ÖÔ∏è'
        self.next_icon = '‚û°Ô∏è'
        self.close_icon = '‚ùå'
        self.today_icon = 'üìÖ'
        self.locked_dates = []  # –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç
        
    def set_month_names(self, names: List[str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤"""
        if len(names) == 12:
            self.month_names = names
    
    def set_week_days(self, days: List[str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
        if len(days) == 7:
            self.week_days = days
    
    def set_select_icon(self, icon: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        self.select_icon = icon
    
    def set_prev_icon(self, icon: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü'"""
        self.prev_icon = icon
    
    def set_next_icon(self, icon: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü'"""
        self.next_icon = icon
    
    def set_close_icon(self, icon: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç"""
        self.close_icon = icon
    
    def set_today_icon(self, icon: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã"""
        self.today_icon = icon
    
    def set_locked_dates(self, dates: List[date]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã"""
        self.locked_dates = dates
    
    def create_calendar(self, year: int, month: int, selected_date: Optional[date] = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞"""
        today = date.today()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        month_name = self.month_names[month - 1]
        header = f"{month_name} {year}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if year > today.year or (year == today.year and month > today.month):
            nav_row.append(InlineKeyboardButton(
                self.prev_icon, 
                callback_data=f"cal_prev_{year}_{month}"
            ))
        else:
            nav_row.append(InlineKeyboardButton(" ", callback_data="cal_none"))
            
        nav_row.append(InlineKeyboardButton(header, callback_data="cal_none"))
        
        if year < today.year + 1 or (year == today.year + 1 and month < 12):
            nav_row.append(InlineKeyboardButton(
                self.next_icon, 
                callback_data=f"cal_next_{year}_{month}"
            ))
        else:
            nav_row.append(InlineKeyboardButton(" ", callback_data="cal_none"))
            
        keyboard.append(nav_row)
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        week_row = []
        for day in self.week_days:
            week_row.append(InlineKeyboardButton(day, callback_data="cal_none"))
        keyboard.append(week_row)
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        month_calendar = cal.monthcalendar(year, month)
        
        for week in month_calendar:
            week_row = []
            for day in week:
                if day == 0:
                    week_row.append(InlineKeyboardButton(" ", callback_data="cal_none"))
                else:
                    current_date = date(year, month, day)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É –¥–∞—Ç—É
                    if current_date < today:
                        # –ü—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞
                        week_row.append(InlineKeyboardButton(
                            f"{self.close_icon}{day}", 
                            callback_data="cal_none"
                        ))
                    elif current_date in self.locked_dates:
                        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
                        week_row.append(InlineKeyboardButton(
                            f"{self.close_icon}{day}", 
                            callback_data="cal_none"
                        ))
                    elif current_date == today:
                        # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
                        week_row.append(InlineKeyboardButton(
                            f"{self.today_icon}{day}", 
                            callback_data=f"cal_select_{year}_{month}_{day}"
                        ))
                    elif current_date == selected_date:
                        # –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
                        week_row.append(InlineKeyboardButton(
                            f"{self.select_icon}{day}", 
                            callback_data=f"cal_select_{year}_{month}_{day}"
                        ))
                    else:
                        # –û–±—ã—á–Ω–∞—è –¥–∞—Ç–∞
                        week_row.append(InlineKeyboardButton(
                            str(day), 
                            callback_data=f"cal_select_{year}_{month}_{day}"
                        ))
            keyboard.append(week_row)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        extra_row = []
        extra_row.append(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cal_cancel"))
        keyboard.append(extra_row)
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_calendar_for_booking(self, start_date: Optional[date] = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        if start_date is None:
            start_date = date.today()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        max_date = start_date + timedelta(days=30)
        
        return self.create_calendar(start_date.year, start_date.month, start_date)
    
    def parse_callback_data(self, callback_data: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç—å callback_data –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        parts = callback_data.split('_')
        
        if len(parts) < 2:
            return {'action': 'none'}
        
        action = parts[1]
        
        if action == 'prev' and len(parts) >= 4:
            return {
                'action': 'prev',
                'year': int(parts[2]),
                'month': int(parts[3])
            }
        elif action == 'next' and len(parts) >= 4:
            return {
                'action': 'next',
                'year': int(parts[2]),
                'month': int(parts[3])
            }
        elif action == 'select' and len(parts) >= 5:
            return {
                'action': 'select',
                'year': int(parts[2]),
                'month': int(parts[3]),
                'day': int(parts[4])
            }
        elif action == 'manual':
            return {'action': 'manual'}
        elif action == 'cancel':
            return {'action': 'cancel'}
        else:
            return {'action': 'none'}
    
    def get_next_month(self, year: int, month: int) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"""
        if month == 12:
            return year + 1, 1
        else:
            return year, month + 1
    
    def get_prev_month(self, year: int, month: int) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"""
        if month == 1:
            return year - 1, 12
        else:
            return year, month - 1

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
booking_calendar = TelegramCalendar()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
booking_calendar.set_month_names([
    '–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
    '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'
])
booking_calendar.set_week_days(['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'])
booking_calendar.set_select_icon('‚úÖ')
booking_calendar.set_prev_icon('‚¨ÖÔ∏è')
booking_calendar.set_next_icon('‚û°Ô∏è')
booking_calendar.set_close_icon('‚ùå')
booking_calendar.set_today_icon('üìÖ')
